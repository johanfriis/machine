#+TITLE: Emacs configuration file
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

This is an Emacs configuration file written in a literal programing style, as
specified by Donald Knuth. It is heavily sourced from and inspired by various
configurations found around the internet, primarily GitHub. It uses a curious
way to bootstrap itself, explained in futher detail in the following section.
This method of bootstrapping and emacs configuration written in org-mode is
borrowed from [[https://github.com/larstvei/dot-emacs][larstvei/dot-emacs]].

* Bootstraping (or Meta Configuration)

  All changes to the configuration should be done in =init.org=, *not* in
  =init.el=. Any changes in the =init.el= will be overwritten by saving
  =init.org=. The =init.el= in this repo should not be tracked by git, and
  is replaced the first time Emacs is started.

  Emacs can't load =.org=-files directly, but =org-mode= provides functions
  to extract the code blocks and write them to a file. There are multiple
  ways of handling this. One can use org-modes built in loading mechanism
  =org-babel-load-file=, or even parse out and evaluate the elisp source
  blocks of a =org= file. Instead, this approach opts for a self compiling
  init.el file.

** A bit about the initial init.el

   When this configuration is loaded for the first time, the ~init.el~ is
   the file that is loaded. It looks like this:

   #+BEGIN_SRC emacs-lisp :tangle no
     ;; This file replaces itself with the actual configuration at first run.

     ;; We can't tangle without org!
     (require 'org)
     ;; Open the configuration
     (find-file (concat user-emacs-directory "init.org"))
     ;; tangle it
     (org-babel-tangle)
     ;; load it
     (load-file (concat user-emacs-directory "init.el"))
     ;; finally byte-compile it
     (byte-compile-file (concat user-emacs-directory "init.el"))
   #+END_SRC

   It tangles the org-file, so that this file is overwritten with the actual
   configuration.

   There is no reason to track the =init.el= that is generated; by running
   the following command =git= will not bother tracking it:

   #+BEGIN_SRC sh :tangle no
     git update-index --assume-unchanged init.el
   #+END_SRC

   If one wishes to make changes to the repo-version of =init.el= start
   tracking again with:

   #+BEGIN_SRC sh :tangle no
     git update-index --no-assume-unchanged init.el
     git checkout init.el
   #+END_SRC

* Configuration Header

  Enable lexical binding. This is the future of emacs and it makes sense.
  [[https://www.emacswiki.org/emacs/DynamicBindingVsLexicalBinding][Lexical Binding]]

  #+BEGIN_SRC emacs-lisp
    ;;; -*- lexical-binding: t -*-
  #+END_SRC

* Compiling self

  The =init.el= should (after the first run) mirror the source blocks in
  the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
  extracts the code blocks from the current file into a source-specific
  file (in this case a =.el=-file).

  To avoid doing this each time a change is made we can add a function to
  the =after-save-hook= ensuring to always tangle and byte-compile the
  =org=-document after changes.

  #+BEGIN_SRC emacs-lisp
    (defun self/tangle-init ()
      "If the current buffer is 'init.org' the code-blocks are
    tangled, and the tangled file is compiled."
      (when (equal (buffer-file-name)
                   (expand-file-name (concat user-emacs-directory "init.org")))
        ;; Avoid running hooks when tangling.
        (let ((prog-mode-hook nil))
          (org-babel-tangle))))
          ;(byte-compile-file (concat user-emacs-directory "init.el")))))

    (add-hook 'after-save-hook 'self/tangle-init)
  #+END_SRC

* Dogfooding

  A series of quick modifications that actually make it bearable to write
  this configuration file itself in emacs org-mode.

  #+BEGIN_SRC emacs-lisp
    (setq byte-compile-warnings nil)
    (defun self/reload-init ()
      "Reload init.el."
      (interactive)
      (message "Reloading init.el...")
      (if (load (concat user-emacs-directory "init.el") 'noerror 'nomessage)
	  (message "Reloading init.el... done.")
	(message "Reloading init.el... error.")))
    (global-set-key (kbd "C-c C-r") 'self/reload-init)
  #+END_SRC

* Early Bird Config

  We need to set some variables very early on, to determine
  behaviour of later packages and tools.
  
  Define =no-littering= config and data directories now. We will
  be using the same directories for other files, so we might
  as well set them up now. In addition to defining the variables
  we will also create the directories if they don't already exist.
  
  #+BEGIN_SRC emacs-lisp
    (setq no-littering-etc-directory
	  (expand-file-name (convert-standard-filename "etc/") user-emacs-directory))
    (setq no-littering-var-directory
	  (expand-file-name (convert-standard-filename "var/") user-emacs-directory))
    (unless (file-directory-p no-littering-etc-directory)
      (make-directory no-littering-etc-directory))
    (unless (file-directory-p no-littering-var-directory)
      (make-directory no-littering-var-directory))
  #+END_SRC
  
  Set the location of enacs NSM (Network Security Manager) file.
  This location is the same used by =no-littering= package later.
  Consider adding a pull request to =no-littering= repo. See [[https://github.com/raxod502/no-littering][README]]
  
  #+BEGIN_SRC emacs-lisp
    (setq nsm-settings-file (concat user-emacs-directory "var/network-security.data"))
  #+END_SRC

* Package Management

  For package management, this instance of the config uses =straight.el=.
  For all intents and purposes I will try to avoid =package.el=.
  
  This means that we disable automatic package initialization by setting
  =package-enable-at-startup= to nil. See [[https://www.reddit.com/r/emacs/comments/1rdstn/set_packageenableatstartup_to_nil_for_slightly/][reddit]] and [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Packaging-Basics.html][manual]].
  
  #+BEGIN_SRC emacs-lisp
    (setq package-enable-at-startup nil)
  #+END_SRC
  
  We need some code to bootstrap the package manager since it is obviously
  not able to package manage itself. See the [[https://github.com/raxod502/straight.el][README]].
  
  #+BEGIN_SRC emacs-lisp
    (let ((bootstrap-file (concat user-emacs-directory "straight/bootstrap.el")))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (delete-region (point-min) url-http-end-of-headers)
	  (eval-buffer)))
      (load bootstrap-file nil 'nomessage))
  #+END_SRC
  
  We then immediataly load =use-package= for the rest of our
  package management / configuration needs. This package handles
  a lot of useful tasks for us, like autoloading functions, binding
  keys, registering major modes and lazy-loading, through the use
  of keywords. See the [[https://github.com/jwiegley/use-package][README]].
  
  #+BEGIN_SRC emacs-lisp
    (straight-use-package '(use-package
			     :host github
			     :repo "jwiegley/use-package"))
  #+END_SRC
  
  Tell =use-package= to automatically install packages if they are
  missing. By default, packages are installed via [[https://github.com/raxod502/straight.el][straight.el]],
  which draws package installation recipes (short lists explaining
  where to download the package) from [[http://melpa.org][MELPA]], [[https://elpa.gnu.org/][GNU ELPA]] and
  [[https://emacsmirror.net/][EmacsMirror]]. You can also specify a recupe manually by putting
  =:recipe= in the =use-package= call, which is an extension to
  =use-package= provided by straight.el. Learn more about recipe
  formatting from the [[https://github.com/melpa/melpa#recipe-format][MELPA README]].
  
  #+BEGIN_SRC emacs-lisp
    (setq use-package-always-ensure t)
  #+END_SRC
  
  Tell use-package to always load packages lazily unless told
  otherwise. It's nicer to have this stort of thing be deterministic:
  if =:demand= is present, the loading is eager; otherwise, the
  loading is lazy. See [[https://github.com/jwiegley/use-package#notes-about-lazy-loading][lazy loading notes]].
  
  #+BEGIN_SRC emacs-lisp
    (setq use-package-always-defer t)
  #+END_SRC

* Helper Functions
  
  Name of the operating system in a more sensible way
  #+BEGIN_SRC emacs-lisp
    (defvar custom/operating-system
      (pcase system-type
	('darwin 'macOS)
	((or 'ms-dos 'windows-nt 'cygwin) 'windows)
	(_ 'linux)))

    (defun custom/system-is-mac ()
      (eq custom/operating-system 'macOS))
  #+END_SRC
  
  Utility function for running expressions only on particular OSes
  #+BEGIN_SRC emacs-lisp
    (defmacro custom/with-operating-system (os &rest body)
      "If the operating system is OS, eval BODY.
    See `custom/operating-system' for the possible values of OS,
    which should not be quoted."
      (declare (indent 1))
      `(when (eq custom/operating-system ',os)
	 ,@body))
  #+END_SRC
  
  Utility functions for checking the window system
  #+BEGIN_SRC emacs-lisp
    (defmacro custom/with-windowed-emacs (&rest body)
      "Eval BODY if Emacs is windowed, else return nil."
      (declare (indent defun))
      `(when (display-graphic-p)
	 ,@body))

    (defmacro custom/with-terminal-emacs (&rest body)
      "Eval BODY if Emacs is not windowed, else return nil."
      (declare (indent defun))
      `(unless (display-graphic-p)
	 ,@body))
  #+END_SRC
  
  Make it easy to specify a number of modes to add a hook to
  #+BEGIN_SRC emacs-lisp
    (defmacro hook-into-modes (function mode-hooks)
      "Add FUNCTION to hooks in MODE-HOOKS."
      `(dolist (hook ,mode-hooks)
	 (add-hook hook ,function)))
  #+END_SRC

* Hygiene

  This section, along with some of the configuration in the
  [[Early Bird]] section deals with keeping emacs from placing files
  just everywhere. The =no-littering= package changes default paths
  for a lot of different pacakges, keeping the =emacs.d= folder clean.
  See it's [[https://github.com/raxod502/no-littering][README]]
  
  #+BEGIN_SRC emacs-lisp
    (use-package no-littering
      :demand t)
  #+END_SRC
  
* QoL and Non-Color-Theme Appearance tweaks

Various UI tweaks that mainly affect GUI mode emacs
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
  (blink-cursor-mode -1)
  (custom/with-windowed-emacs
    (set-frame-font "-*-Fira Code-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1" nil t))
        
  ;; consider replacing system-is-mac with
  ;; (when (memq window-system '(mac ns x)))
  ;; to capture linux usage also
  (use-package exec-path-from-shell
    :if (and (custom/system-is-mac) (display-graphic-p))
    :config (setq exec-path-from-shell-check-startup-files nil)
    :init (exec-path-from-shell-initialize))
#+END_SRC

Disable the *About GNU Emacs* buffer at startup, and go straight
for the scratch buffer. This is especially useful because the
startup buffer is "special" and some features that are supposed
to be globally available to not work in it (E.g., Projectile.)
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

Disable the initial *scratch* message
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message nil)
#+END_SRC

Disable the menu bar.
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC

Never ever ring an alarm bell, please.
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function #'ignore)
#+END_SRC

Make =mode-line-position= show the column, not just the row.
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC

Display keystrokes in the echo area almost immediately, not after
one second. We can not set the delay to zero, since somebody thought
it would be a good idea to have that value suppress keystroke
display entirely.
#+BEGIN_SRC emacs-lisp
  (setq echo-keystrokes 1e-6)
#+END_SRC

When point is on a paren, highlight the matching paren, event if it
wasn't just typed. Also, do it immediately, instead of after 1/8 of
a second. Note that =show-paren-delay= must be changed *before*
turning on =show-paren-mode= in order for the change to take effect.
#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode t)
#+END_SRC

Automatically revert files that were changed on disk, if they have
not been modified in Emacs since last time they were saved. Turn the
delay on auto-reloading down from 5 seconds to 1 second. We have to
do this before turning on =auto-revert-mode= for the change to take
effect. The setting could be set through =customize-set-variable=,
but apparently that is slow enough to show up in profiling.

Auto reverting can be expanded more, to only revert visible
buffers, disable user confirmation and other tweaks.
See a [[https://github.com/raxod502/radian/blob/master/radian-emacs/radian-revert.el][sample implementation]] of these features.
#+BEGIN_SRC emacs-lisp
  (setq auto-revert-interval 1)
  (global-auto-revert-mode 1)
#+END_SRC

Packages dealing with lines and their length. For one, we don't want
to truncate lines, ever. Not when they react the end of the window,
or when they reach the end of a split window. By default, Emacs will
truncate a line if the split window width is less than 50.
We also want to highlight the column at position 80.
#+BEGIN_SRC emacs-lisp
  (setq-default truncate-lines t)
  (setq truncate-partial-width-windows nil)

  (use-package fill-column-indicator
    :init
    (progn
(setq fci-rule-column 79
      fci-rule-width 1
      fci-rule-color "#CCCCCC"
      fci-rule-character ?|
      fci-rule-character-color "#CCCCCC")
(hook-into-modes 'fci-mode '(prog-mode-hook))))
#+END_SRC

Don't create auto-save files
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
#+END_SRC

Keep multiple numbered backups, rather than a single file. Backups
should be made by copying, preventing hard links from being made
pointing to the backup rather than original file. Also, allow silent
deleting of old backup files.
#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying 1)
  (setq version-control t)
  (setq delete-old-versions t)
#+END_SRC

Show indentation guides
#+BEGIN_SRC emacs-lisp
  (use-package indent-guide)
#+END_SRC

When reopening a file, return mark to last position
#+BEGIN_SRC emacs-lisp
  (save-place-mode 1)
#+END_SRC

Save minibuffer commands and their history
#+BEGIN_SRC emacs-lisp
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
  '(kill-ring
    search-ring
    regexp-search-ring
    last-kbd-macro
    kmacro-ring
    shell-command-history))
  (savehist-mode 1)
#+END_SRC

Use history as a lookup instead of a log
#+BEGIN_SRC emacs-lisp
  (setq history-delete-duplicates t)
#+END_SRC

Usually i am careful, so i'll opt for the grown up
version of yes-or-no-p
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Start *scratch* buffer in org-mode and make it immortal
#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'org-mode)
  (with-current-buffer "*scratch*"
    (emacs-lock-mode 'kill))
  (use-package persistent-scratch
    :config
    (persistent-scratch-setup-default))
#+END_SRC

Disable Emacs' built-in version control handling. This improves
performance and disables some annoying prompts and messages,
especially regarding symlinks. See [[http://stackoverflow.com/a/6190338/3538165][stackoverflow.]]
#+BEGIN_SRC emacs-lisp
  (setq vc-handled-backends nil)
#+END_SRC
  
** Custom mode-line
   
   The following code is taken, almost unmodified, from the
   brilliant emacs setup of [[https://github.com/raxod502/radian][radox502]].
   
   #+BEGIN_SRC emacs-lisp
     ;;; The following code customizes the mode bar to something like:
     ;;; [*] init.el        96% (2410,30)  [radian:master*]  (Emacs-Lisp Paredit AggrIndent)

     (defun custom/mode-line-buffer-modified ()
       "Return a mode line construct indicating buffer modification status.
     This is [*] if the buffer has been modified and whitespace
     otherwise. (Non-file-visiting buffers are never considered to be
     modified.) It is shown in the same color as the buffer name, i.e.
     `mode-line-buffer-id'."
       (propertize (if (and (buffer-modified-p)
			    (buffer-file-name))
		       "[*]" "   ")
		   ;; Make sure to show it in the same color as the buffer
		   ;; name.
		   'face 'mode-line-buffer-id))

     ;; Normally the buffer name is right-padded with whitespace until it
     ;; is at least 12 characters. This is a waste of space, so we
     ;; eliminate the padding here.
     (setq-default mode-line-buffer-identification
		   (propertized-buffer-identification "%b"))

     (defvar-local custom/mode-line-project-and-branch nil
       "Mode line construct showing Projectile project and Git status.
     The format is [project:branch*], where the * is shown if the
     working directory is dirty. Either component can be missing; this
     might happen if Projectile is not installed or if the project is
     not version-controlled with Git. If nothing should be displayed,
     this variable is set to nil.
     This variable is actually only a cached value; it is set by
     `custom/compute-mode-line-project-and-branch' for performance
     reasons.")

     ;; Don't clear the cache when switching major modes (or using M-x
     ;; normal-mode).
     (put 'custom/mode-line-project-and-branch 'permanent-local t)

     (defun custom/compute-mode-line-project-and-branch ()
       (let ((old custom/mode-line-project-and-branch)
	     (new
	      (let* (;; Don't insist on having Projectile loaded.
		     (project-name (when (featurep 'projectile)
				     (projectile-project-name)))
		     ;; Projectile returns "-" to mean "no project". I'm
		     ;; still wondering what happens if someone makes a
		     ;; project named "-".
		     (project-name (unless (equal project-name "-")
				     project-name))
		     ;; Check if we are actually in a Git repo, and Git is
		     ;; available.
		     (git (and (executable-find "git")
			       (locate-dominating-file default-directory ".git")))
		     (branch-name
		      (when git
			;; Determine a reasonable string to show for the
			;; current branch. This is actually more or less
			;; the same logic as we use for the Radian zsh
			;; prompt.
			(with-temp-buffer
			  ;; First attempt uses symbolic-ref, which returns
			  ;; the branch name if it exists.
			  (call-process "git" nil '(t nil) nil
					"symbolic-ref" "HEAD")
			  (if (> (buffer-size) 0)
			      ;; It actually returns something like
			      ;; refs/heads/master, though, so let's try to
			      ;; trim it if possible.
			      (let ((regex "^\\(refs/heads/\\)?\\(.+\\)$")
				    (str (string-trim (buffer-string))))
				(if (string-match regex str)
				    (match-string 2 str)
				  ;; If it's something weird then just show
				  ;; it literally.
				  str))
			    ;; If symbolic-ref didn't return anything on
			    ;; stdout (we discarded stderr), we probably
			    ;; have a detached head and we should show the
			    ;; abbreviated commit hash (e.g. b007692).
			    (erase-buffer)
			    (call-process "git" nil '(t nil) nil
					  "rev-parse" "--short" "HEAD")
			    (if (> (buffer-size) 0)
				(string-trim (buffer-string))
			      ;; We shouldn't get here. Unfortunately, it
			      ;; turns out that we do every once in a
			      ;; while. (I have no idea why.)
			      "???")))))
		     (dirty (when git
			      (with-temp-buffer
				(call-process "git" nil t nil
					      "status" "--porcelain"
					      "--ignore-submodules=none")
				(if (> (buffer-size) 0)
				    "*" "")))))
		(cond
		 ((and project-name git)
		  (format "  [%s:%s%s]" project-name branch-name dirty))
		 (project-name
		  (format "  [%s]" project-name))
		 ;; This should never happen unless you do something
		 ;; perverse like create a version-controlled Projectile
		 ;; project whose name is a hyphen, but we want to handle
		 ;; it anyway.
		 (git
		  (format "  [%s%s]" branch-name dirty))))))
	 (unless (equal old new)
	   (setq custom/mode-line-project-and-branch new)
	   (force-mode-line-update))))

     ;; We will make sure this information is updated after one second of
     ;; inactivity, for the current buffer.

     (defvar custom/mode-line-timer-primary nil)
     (defvar custom/mode-line-timer-secondary nil)

     (defun custom/compute-mode-line-and-reschedule ()
       (when custom/mode-line-timer-secondary
	 (cancel-timer custom/mode-line-timer-secondary))
       (custom/compute-mode-line-project-and-branch)
       (setq custom/mode-line-timer-secondary
	     (run-with-idle-timer
	      (time-add 1 (current-idle-time)) nil
	      #'custom/compute-mode-line-and-reschedule)))

     (when custom/mode-line-timer-primary
       (cancel-timer custom/mode-line-timer-primary))

     (when custom/mode-line-timer-secondary
       (cancel-timer custom/mode-line-timer-secondary))

     (setq custom/mode-line-timer-primary
	   (run-with-idle-timer
	    1 'repeat #'custom/compute-mode-line-and-reschedule))

     (setq-default mode-line-format
		   '(;; Show [*] if the buffer is modified.
		     (:eval (custom/mode-line-buffer-modified))
		     " "
		     ;; Show the name of the current buffer.
		     mode-line-buffer-identification
		     "   "
		     ;; Show the row and column of point.
		     mode-line-position
		     ;; Show the current Projectile project.
		     custom/mode-line-project-and-branch
		     ;; Show the active major and minor modes.
		     "  "
		     mode-line-modes))
   #+END_SRC
   
* Packages
   
   This package provides an easy way to change the display
   of minor mode names in the mode line.
   #+BEGIN_SRC emacs-lisp
     (use-package delight
       :demand t)
   #+END_SRC
   
   Set up undo-tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :delight (undo-tree-mode " \uf1bb ")
       :init (global-undo-tree-mode))
   #+END_SRC

* NeoTree

  This package provides a helpful sidebar file and directory navigator
  #+BEGIN_SRC emacs-lisp
    (use-package neotree
      :after evil
      :config
      (progn
	(evil-leader/set-key
	 "o" 'neotree-toggle)

	(setq neo-window-width 38
	      neo-theme 'ascii
	      ;; this prevents neotree from automatically switching
	      ;; to current files directory
	      neo-autorefresh nil
	      ;neo-smart-open t
	      neo-banner-message "Press ? for neotree help"
	      neo-show-updir-line nil
	      neo-mode-line-type 'neotree
	      neo-auto-indent-point t
	      neo-create-file-auto-open t)

	(add-hook 'neotree-mode-hook
		  (lambda ()
		    (evil-define-key 'normal neotree-mode-map (kbd "R") 'neotree-refresh)
		    (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-stretch-toggle)
		    (evil-define-key 'normal neotree-mode-map (kbd "o") 'neotree-enter)
		    (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
		    (evil-define-key 'normal neotree-mode-map (kbd "j") 'neotree-next-line)
		    (evil-define-key 'normal neotree-mode-map (kbd "k") 'neotree-previous-line)
		    (evil-define-key 'normal neotree-mode-map (kbd "l") 'neotree-expand-or-open)
		    (evil-define-key 'normal neotree-mode-map (kbd "h") 'neotree-collapse-or-up)
		    (evil-define-key 'normal neotree-mode-map (kbd "J") 'neotree-select-down-node)
		    (evil-define-key 'normal neotree-mode-map (kbd "K") 'neotree-select-up-node)
		    (evil-define-key 'normal neotree-mode-map (kbd "r") 'neotree-rename-node)
		    (evil-define-key 'normal neotree-mode-map (kbd "c") 'neotree-create-node)))))
  #+END_SRC

* Clipboard
  
  Lets attempt to use a nice little package instead of the code
  in the next block.
  #+BEGIN_SRC emacs-lisp
    (use-package pbcopy
      :if (and (custom/system-is-mac) (not (display-graphic-p)))
      :init (turn-on-pbcopy))
  #+END_SRC
  
  Handle clipboard integration in terminal Emacs. We actually
  need to call out to =pbcopy= and =pbpaste= on macOS ... I
  can't believe that this is 2017 (as of this writing).
  #+BEGIN_SRC emacs-lisp
    ;;(custom/with-operating-system
    ;; macOS
    ;; (custom/with-terminal-emacs
    ;;  (defvar custom/last-copy-to-macOS nil
    ;;    "The last text that was copied to the system clipboard")
    ;;  (defun custom/paste-from-macOS ()
    ;;      (let* (;; Setting default-directory to a directory
    ;;	     ;; that is sure to exist means that this
    ;;	     ;; code won't error out even the directory
    ;;	     ;; for the current buffer no longer exists
    ;;	     (default-directory "/")
    ;;	     ;; pbpaste returns clipboard contents as string
    ;;	     (text (shell-command-to-string "pbpaste")))
    ;;	;; if this functions returns nil then the system
    ;;	;; clipboard is ignored and then the first element in
    ;;	;; the yank ring (which, if the system clipboard has
    ;;	;; not been modified since the last kill, will be the
    ;;	;; same) is returned. Including this `unless' clause
    ;;	;; prevents you from getting the same text yanked the
    ;;	;; first time you ran `yank-pop'.
    ;;	(unless (string= text custom/last-copy-to-macOS)
    ;;	  text)))
    ;;  (defun custom/copy-to-macOS (text)
    ;;    (let* (;; Setting default-directory to a directory
    ;;	   ;; that is sure to exist means that this
    ;;	   ;; code won't error out even the directory
    ;;	   ;; for the current buffer no longer exists
    ;;	   (default-directory "/")
    ;;	   ;; setting `process-connction-type' makes Emacs
    ;;	   ;; use a pipe to communicate with `pbcopy' instead
    ;;	   ;; of a pty (which is overkill).
    ;;	   (process-connection-type nil)
    ;;	   ;; The nil argument tells Emacs to discard stdout and
    ;;	   ;; stderr. Note, we aren't using `call-process' here
    ;;	   ;; because we want this command to be asynchronous.
    ;;	   ;;
    ;;	   ;; Command `pbcopy' writes stdin to the clipboard
    ;;	   ;; until it receives EOF.
    ;;	   (proc (start-process "pbcopy" nil "pbcopy")))
    ;;      (process-send-string proc text)
    ;;      (process-send-eof proc))
    ;;    (setq custom/last-copy-to-macOS text))
    ;;  (setq interprogram-paste-function #'custom/paste-from-macOS)
    ;;  (setq interprogram-copy-function #'custom/copy-to-macOS)))
    ;;
    ;;;; If you have something in the system clipboard and
    ;;;; then kill something in Emacs, then by default whatever
    ;;;; you had in the system clipboard is gone and there is
    ;;;; no way to get it back. Setting the following option
    ;;;; makes it so that when you kill something in Emacs, whatever
    ;;;; was in the system clipboard is pushed onto the kill ring.
    ;;;; That way you can paste it with `yank-pop'.
    ;;(setq save-interprogram-paste-before-kill t)
  #+END_SRC

* Org Mode
  
  #+BEGIN_SRC emacs-lisp
    ;(defface org-block-begin-line
    ;  '((t (:foreground "#008ED1" :background "#990000")))
    ;  "Face used for the line delimiting the begin of source blocks.")

    ;(defface org-block-background
    ;  '((t (:background "#FFFFEA")))
    ;  "Face used for the source block background.")

    ;(defface org-block-end-line
    ;  '((t (:foreground "#008ED1" :background "#990000")))
    ;  "Face used for the line delimiting the end of source blocks.")

    (use-package org
      :demand t
      :config
      (progn
	(add-to-list 'org-structure-template-alist
		     ;; start an elisp block with `<x'
		     (list "x" (concat "#+BEGIN_SRC emacs-lisp\n" "?\n" "#+END_SRC")))
	(setq org-src-fontify-natively t
	      org-fontify-whole-heading-line t
	      ;; Always indent stars and their respective text and only
	      ;; use odd star levels to align things a bit cleaner
	      org-startup-indented t
	      org-odd-levels-only t
	      ;; Automatically guess if there should be blanks before
	      ;; new headings. This can also be set to a boolean.
	      org-blank-before-new-entry '((heading . auto) (plain-list-item . auto))
	      ;; amount of spaces before next heading required for org to
	      ;; show spaces between collapsed headings
	      org-cycle-separator-lines 0)))

  #+END_SRC

* Evil (4 Life)
  
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :demand t
      :defines (evil-mode)
      :bind (:map evil-normal-state-map
		  ("`" . buffer-menu))
      :init
      (progn
	(setq evil-want-C-i-jump nil)

	; =evil-leader= adds a vim like leader mode to evil. It
	; must be initialized before evil itself.
	(use-package evil-leader
	  :init (global-evil-leader-mode)
	  :config
	  (progn
	    (setq evil-leader/leader "SPC"
		  evil-leader/in-all-states t)))

	(evil-mode 1)))

    (use-package evil-org
      :after org
      :init
      :config
      (add-hook 'org-mode-hook 'evil-org-mode)
      (add-hook 'evil-org-mode-hook
		(lambda ()
		  (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading)))))
  #+END_SRC

* Some Theme stuff
  #+BEGIN_SRC emacs-lisp
    ;(use-package dracula-theme
    ;  :init
    ;  (load-theme 'dracula))
    ;(use-package leuven-theme
    ;  :init
    ;  (load-theme 'leuven t))
    (use-package solarized-theme
      :init
      (load-theme 'solarized-light t))
  #+END_SRC

* Javascript

  Setup regular JS2 mode
  #+BEGIN_SRC emacs-lisp
    (use-package js2-mode
	:defer t
	:init
	(progn
	(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
	:config
	(progn
	  (setq js2-strict-inconsistent-return-warning nil
		js2-basic-offset 2
		js2-strict-trailing-comma-warning nil
		js2-strict-missing-semi-warning nil)))
  #+END_SRC
  
  Experiment with rjsx-mode
  #+BEGIN_SRC emacs-lisp
    (use-package rjsx-mode
      :delight (rjsx-mode " \ue625 ")
      :bind (:map rjsx-mode-map
		  ("<" . nil)
		  ("C-d" . nil))
      :init
      (progn
	(add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))))
  #+END_SRC
  
  Add JSON support
  #+BEGIN_SRC emacs-lisp
    (use-package json-mode
      :commands json-mode
      :config (setq-default js-indent-level 2
			    json-reformat:indent-level 2))
  #+END_SRC
  
  
  add prettier support
  #+BEGIN_SRC emacs-lisp
    (use-package prettier-js
      :init
      (progn
	(add-hook 'js2-mode-hook 'prettier-js-mode)
	(add-hook 'rjsx-mode-hook 'prettier-js-mode)
	(setq prettier-js-args '(
				 "--trailing-comma" "es5"
				 "--single-quote"
				 "--no-semi"))))
  #+END_SRC
  
* REST Client
  
  Make exploration of REST clients simpler
  
  https://github.com/pashky/restclient.el
  #+BEGIN_SRC emacs-lisp
    (use-package restclient)
  #+END_SRC
  
* Completion

   
This package provides a simple mechanism for recording the user's
command history so that it can be used to sort commands by usage.
It is automatically used by Ivy. Note, however, that historian.el
will hopefully replace smex soon, since it provides more
functionality in a more elegant way. See [1], [2].

[1]: https://github.com/nonsequitur/smex
[2]: https://github.com/PythonNut/historian.el
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :bind (("M-x" . smex)))
#+END_SRC

This package provides a framework for sorting choices in a
hopefully intelligent way based on what the user has typed in,
using "fuzzy matching" (i.e. "ffap" matches "find-file-at-point").
See [1].

[1]: https://github.com/lewang/flx
#+BEGIN_SRC emacs-lisp
  (use-package flx)
#+END_SRC

Ivy is a completion and narrowing framework. What does this mean?
By default, Emacs has some basic tab-completion for commands,
files, and so on. Ivy replaces this interface by showing a list of
all the possible options, and narrowing it in an intelligent
way (using smex and flx, if they are installed) as the user inputs
a query. This is much faster.
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :delight (ivy-mode "")
    :init
      ;; Use Ivy for `completing-read'.
      (ivy-mode 1)

      ;; Use fuzzy matching for Ivy, powered by flx, but not for Swiper
      (setq ivy-re-builders-alist
          '((t . ivy--regex-fuzzy)))

      ;; Increase the maximum number of candidates that will be sorted
      ;; using `flx'. The default is 200, which means `flx' is almost
      ;; never used. Setting it too high (e.g. 10000) causes lag. This
      ;; seems to be a good compromise (for example, @PythonNut uses it,
      ;; see [1]).
      ;;
      ;; [1]: https://github.com/PythonNut/emacs-config/blob/c8bff5cce293006ec5cdc39a86982431a758a9a0/modules/config-ivy.el#L68
      (setq ivy-flx-limit 2000))
#+END_SRC

Ivy is just a general-purpose completion framework. It can be used
to generate improved versions of many stock Emacs commands. This is
done by the Counsel library. (It also adds a few new commands, such
as `counsel-git-grep'.)
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind (;; Use Counsel for common Emacs commands.
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-h f" . counsel-describe-function)
           ("C-h v" . counsel-describe-variable)
           ("C-h l" . counsel-load-library)
           ("C-h C-l" . counsel-find-library)
           ("C-h S" . counsel-info-lookup-symbol)
           ("C-x 8 RET" . counsel-unicode-char)
  
           ;; Introduce a few new commands that use Counsel. The
           ;; bindings are suggested by the README [1].
           ;;
           ;; [1]: https://github.com/abo-abo/swiper
           ("C-c g" . counsel-git)
           ("C-c j" . counsel-git-grep)
           ;("C-c k" . counsel-rg)
  
           ;; Interactively select a kill to yank using ivy, when using
           ;; `yank-pop'.
           ("M-y" . counsel-yank-pop)
  
           ;; After you have pressed M-:, you can use C-r to select a
           ;; previous entry using Counsel.
           :map read-expression-map
           ("C-r" . counsel-expression-history))
    :config
  
    ;; If there is a valid file at point, pre-select in C-x C-f.
    (setq counsel-find-file-at-point t))
#+END_SRC

Remembers your choices in completion menus.
#+BEGIN_SRC emacs-lisp
  (use-package historian
    :demand t
    :config
  
    ;; Enable the functionality of historian.el.
    (historian-mode 1))
#+END_SRC

Uses Historian to sort Ivy candidates by frecency+flx.
#+BEGIN_SRC emacs-lisp
  (use-package ivy-historian
    :after ivy
    :config
  
    ;; Tweak historian weighting settings. These values are chosen
    ;; subjectively to produce good results.
    (setq ivy-historian-freq-boost-factor 500)
    (setq ivy-historian-recent-boost 500)
    (setq ivy-historian-recent-decrement 50)
  
    ;; Enable the functionality of historian-ivy.
    (ivy-historian-mode 1))
#+END_SRC

* Projectile
  
This package introduces a concept of "projects" and provides
commands for quick navigation within and between them.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :demand t
    :config
    (projectile-mode 1))
#+END_SRC
